/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/Nbcgb6FCYTp
 */

import { AddressObject, ParsedMail } from "mailparser";
import prettyBytes from "pretty-bytes";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "./ui/tabs";
import { Badge } from "./ui/badge";

export function EmailViewer({ email }: { email: ParsedMail }) {
  const to = Array.isArray(email.to)
    ? email.to.map((to) => to.text)
    : email.to
    ? [email.to]
    : [];
  const cc = Array.isArray(email.cc)
    ? email.cc.map((cc) => cc.text)
    : email.cc
    ? [email.cc]
    : [];
  return (
    <div className="flex flex-col p-2">
      <div className="flex items-start gap-4">
        <div className="grid gap-1 text-sm">
          <div className="font-semibold">{email.from?.text}</div>
          {to.length > 0 && (
            <ul className="text-gray-500">
              {to.map((to, i) => (
                <li key={i}>
                  <span className="font-semibold">To: </span>
                  {typeof to === "string" ? to : (to as AddressObject).text}
                </li>
              ))}
            </ul>
          )}
          {cc.length > 0 && (
            <ul className="text-gray-500">
              {cc.map((cc, i) => (
                <li key={i}>
                  <span className="font-semibold">Cc: </span>
                  {typeof cc === "string" ? cc : (cc as AddressObject).text}
                </li>
              ))}
            </ul>
          )}
          <div className="font-semibold">{email.subject}</div>
        </div>
        <div className="ml-auto text-xs text-gray-500">
          {email.date?.toDateString()}
        </div>
      </div>
      <Tabs className="flex flex-col pt-2" defaultValue="text">
        <TabsList className="w-full justify-start">
          <TabsTrigger value="text">Text</TabsTrigger>
          <TabsTrigger value="html">HTML</TabsTrigger>
          <TabsTrigger value="headers">Headers</TabsTrigger>
        </TabsList>
        <TabsContent className="flex-1" value="text">
          <AttachmentList attachments={email.attachments} />
          <div
            className="pt-4"
            dangerouslySetInnerHTML={{
              __html: email.textAsHtml || "",
            }}
          />
        </TabsContent>
        <TabsContent className="flex-1" value="html">
          <AttachmentList attachments={email.attachments} />
          <iframe className="flex pt-4" srcDoc={email.html || ""} />
        </TabsContent>
        <TabsContent className="flex-1" value="headers">
          <HeaderList headers={email.headers} />
        </TabsContent>
      </Tabs>
    </div>
  );
}

const AttachmentList = ({
  attachments,
}: {
  attachments: ParsedMail["attachments"];
}) => (
  <ul className="flex gap-2">
    {attachments.map((attachment, i) => (
      <li key={i} className="flex items-center gap-2">
        <Badge className="hover:underline" color="gray-500">
          <a
            href={`data:application/octet-stream;base64,${attachment.content.toString(
              "base64"
            )}`}
            download={attachment.filename}
          >
            {attachment.filename} ({prettyBytes(attachment.size)})
          </a>
        </Badge>
      </li>
    ))}
  </ul>
);

const HeaderList = ({ headers }: { headers: ParsedMail["headers"] }) => (
  <ul className="grid gap-2">
    {Array.from(headers, ([name, value]) => ({ name, value })).map(
      ({ name, value }, i) => (
        <li key={i} className="grid gap-1">
          <span className="font-semibold">{name}</span>
          {typeof value === "string" ? (
            <span>{value.toString()}</span>
          ) : (
            <pre>{JSON.stringify(value, null, 2)}</pre>
          )}
        </li>
      )
    )}
  </ul>
);
